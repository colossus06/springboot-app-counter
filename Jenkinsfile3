pipeline{
    agent any
    // tagging builds with build id
    environment {
        imageName = "springbootapp"
        registryCredentials = "nexus"
        registry = "127.0.0.1:8086/"
        // dockerImage = ''
    }
    tools {
        maven "maven3.9"
    }
    stages{
        stage ('Checkout'){
            steps{
                script{
                    checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/colossus06/springboot-app-counter.git']])
                    sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
                    ''' 
                }
            }
        }
        stage("build & SonarQube analysis") {
            steps {
                script{
                    withSonarQubeEnv(credentialsId: 'sonar-token') {
                    sh 'mvn clean package sonar:sonar'
              }
            }

            }
          }
        stage("Quality Gate Status"){
            steps{
                script{
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }

        // Uploading Docker images into Nexus Registry
        stage('Uploading to Nexus') {
            steps{
                script {
                    docker.withRegistry('http://'+registry, registryCredentials) {
                    def customImage = docker.build("${imageName}:${env.BUILD_ID}")
                    /* Push the container to the custom Registry */
                    customImage.push()
                    // docker.withRegistry( 'http://'+registry, registryCredentials ) {
                    // dockerImage.push('env.BUILD_ID')
                    }
                }
            }
        }
        stage("identifying misconfigurations"){
            steps{
                script{
                    dir('kubernetes/myapp/') {
                        withEnv(['DATREE_TOKEN=1eac0b97-8252-4d88-bc19-23118f8f3409']) {
                            sh 'datree test .'
                        }
                    }
                    // withCredentials([string(credentialsId: 'datree-token', variable: 'datree')]) {
                    //     dir('kubernetes/myapp/') {
                    //         // run a policy check against kubernetes files
                    //         sh'helm datree test .'
                    //         }
                    //     }
                }
            }
        }
    }

    post {
		always {
			mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: 'denizkavuk86@gmail.com', mimeType: 'text/html', replyTo: '', subject: "${currentBuild.result} CI: Project name -> ${env.JOB_NAME}", to: "denizkavuk86@gmail.com";  
		}
	}
}