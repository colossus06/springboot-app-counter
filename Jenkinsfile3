pipeline{
    agent any
    // tagging builds with build id
    environment {
        imageName = "springbootapp"
        registryCredentials = "nexus"
        registry = "127.0.0.1:8086/"
        resitryHelm= "127.0.0.1:8081/"
        // dockerImage = ''
    }
    tools {
        maven "maven3.9"
    }
    stages{
        stage ('Checkout'){
            steps{
                script{
                    checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/colossus06/springboot-app-counter.git']])
                    sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
                    ''' 
                }
            }
        }
        // stage("build & SonarQube analysis") {
        //     steps {
        //         script{
        //             withSonarQubeEnv(credentialsId: 'sonar-token') {
        //             sh 'mvn clean package sonar:sonar'
        //             }
        //         }

        //     }
        // }
        // stage("Quality Gate Status"){
        //     steps{
        //         script{
        //             waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
        //         }
        //     }
        // }
        // Uploading Docker images into Nexus Registry
        // stage('Uploading to Nexus') {
        //     steps{
        //         script {
        //             docker.withRegistry('http://'+registry, registryCredentials) {
        //             def customImage = docker.build("${imageName}:${env.BUILD_ID}")
        //             /* Push the container to the custom Registry */
        //             customImage.push()
        //             // docker.withRegistry( 'http://'+registry, registryCredentials ) {
        //             // dockerImage.push('env.BUILD_ID')
        //             }
        //         }
        //     }
        // }
        // stage("identifying misconfigurations"){
        //     steps{
        //         script{
        //             withCredentials([string(credentialsId: 'datree-token', variable: 'datree')]) {                        
        //                 dir('kubernetes/myapp') {
        //                     // run a policy check against kubernetes files
        //                     sh'helm datree test .'
        //                 }
        //             }
        //         }
        //     }
        // }
        stage("pushing helm chart to nexus repo"){
            steps{
                script{
                    withCredentials([string(credentialsId: 'nexus-password', variable: 'nexus_variable')]) {
                        dir('kubernetes/') {
                            sh'''
                            helmversion=$(helm show chart myapp| grep version| cut -d: -f 2| tr -d ' ')
                            tar -czvf myapp-${helmversion}.tgz myapp/
                            curl -u admin:$nexus_variable http://127.0.0.1:8081/repository/helm-hosted/ --upload-file myapp-${helmversion}.tgz -v
                            '''
                        }
                    }
                }
            }
        }
        stage("Deploy to minikube"){
            steps{
                script{
                    dir('kubernetes/myapp/templates'){
                    kubernetesDeploy (configs: 'deployment.yaml', kubeconfigId: 'k8sconfig_pwd')
                    }
                }
            }
        }
    }

    // post {
	// 	always {
	// 		mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: 'denizkavuk86@gmail.com', mimeType: 'text/html', replyTo: '', subject: "${currentBuild.result} CI: Project name -> ${env.JOB_NAME}", to: "denizkavuk86@gmail.com";  
	// 	}
	// }
}